c language:
    - it is middle language 
    - u can access memory and bit manipulation

- headers:
    stdio.h : standard input output
        - printf
        - scanf

variable:
    - declare 
        - int var;
    - decalre and initilized:
        - int var = 12;
    - reassign:
        int var = 12;
        var = 1;    

- to access the enviroment varaiable:
    - #include <stdlib.h>
    char *getenv(const char* name);
    

integer:
    - to know the size of a variable use sizeof(), which is an operator
    - 1 byte = 0xff = 255
    - 2 byte = 0xffff = 65535
    - if the value of the variable exceeded the max then the variable would start from 0 again

- fprintf(FILE* stream, const char *format,...)
    - write the formatted data to the stream

- snprintf:
    - would write formatted string to the buffer 
    - ex:
        - snprintf(buff, MAXLEN, "%s", name)

- printf:
    - the first parameter is also a string iterator ""
    - %d -> signed int
    - %u -> unsigned int
    - pointer:
        - if u want to print the address where the pointer point to use %p
        ex:
            char* c;
            printf("the address is %p",c);
    - bool:
        - if u want to print bool value u have to use if statment 
        - ex:
            - printf(" write %s \n", p_ring->writeValid?"true":"false");

- puts("ss"):
    - print string to standard output
    - it is equal to printf("%s", "word");

- using debug technik:
    - ex:
        #ifdef enable_diag          // if output of diagnostic messages enabled
        #define sprintDebug(x, y, args...)    sprintf(x, y, ##args)
        #else
        #define sprintDebug(x, y, args...)
        #endif

- strcpy(char x[N], char y[N] )
    - copy the content of array y to array x
- macro
    # : to add "" around the varaiable
    ## : var ## _cmd 
- variadic:
    convert ... to __VA_ARGS__ in macro 

- struct:
    - it is a way to group the data in some logic
    -ex: 
        typedef struct{char first; char second; } sample_t;
        sample_t var;
- enum:
    - to assign integer to variable
    - ex:
        - typedef enum {
            empty,
            received,
            sending, 
        }  
    - u can use enum as return value of an API to say what the API can return
    - ex:
        - typedef enum{
        erro,
        ok,
        empty
        } status

        - status myfunction();
        - here the function would return something from this enum


- function pointer:
    - typedef void (*TCmdReceivedCallbackPtr)(uint16_t nCmd, uint8_t* pData, uint8_t nDataLen);

- object files:
    - application binary interface ABI:
        - instruction set, memory layout
        - existing data type, size, alignmenet
        - function calling conventation
        - used object file format
    - object file format: 
        ELF format
    - exectuable object file
    - static library:
        - to link against static library
        - gcc -L/location nameOfLib 
    - dynamic library:
        - the library location should be given to the following enviroment variable
        - export LD_LIBRARY_PATH=/opt/geometry

- object oriented:
    - object can be construced in two ways:
        - one:
            - object without any attribute and the attribute would be added at the run time
            - this method is called prototypr-based OOP

        - two:
            - the class is templed which is compiled before 
            - u cannot change the class at the run time
            - th is known as class-based OOP

- Linux layout:
    - HW -> OS -> shell[library which has standard API, application]
    - HW -> kernel -[system call]-> shell(libc) -function call-> application

- kernel process vs user process:
    - kernel first is started then then can create user process
    - one kernel process is active at a time 

- kernel development:
    - one process run in the kernel
    - no libc is provided like glibc for the kernel
    - u have full access to the memory
    - 
- file I/O :
    - to work on file u need 5 functions open, read, write, lseek, and close
    - it is unbuffered I/O means it called a system call immediatley
    - all open files are referred to by file descriptors 
    - file descriptors has 0 as standard input, 1 as standard output, 2 as standard error
    - the standard is to used STDIN_FILEENO, STDOUT_FILEENO, STDERR_FILEENO  which are 
    defined in unistd.h header 
    - file descriptors are per process 
    - the header is provided in fcntl.h
    - open function:
        - it would return -1 for failed
        - int open(const char* path, int oflag, mode_t mode)
            - oflag:    Mandatory: O_RDONLY, O_WRONLY, O_RDWR, O_EXEC
                        Options:  O_APPEND, O_CLOEXEC, O_CREAT, O_EXCL, O_NONBLOCK. O_SYNC 
            - mode: it is important only if u use open to create the file to set the permission of the file
            otherwise it is ignored

        - to create file use 
            - open(path, O_CREAT | O_TRUNC | O_WRONLY)
    - close function:
        - int close(int fd);
    -  ssize_t read(int fd, char *buf, size_t nbytes)
        - return the number of byte which is read
    - ssoze write(int fd, char *buf, size_t nbytes)

- to duplicate file descriptors:
    - int dup2(int fd, int fd2)
        - duplicate fd in fd2

- fcntl(int fd, int cmd, arg):
    - u can change the the status of the file like read only, write only 

- errno:
    - this varible would be set when the system call failed
    - it wont be reseted if the system call successed 
    - tp print the message use perror("msg") which would print the message plus the message according to
        errno
-------------------------------------------------------------------------------------------
###################
#### c language ###
###################

- macros:
    # define min(m,x) ((m) < (n) ? (m) : (n))
    # define max(m,x) ((m) > (n) ? (m) : (n))
    - u can implement switch statement using macro
    #define test(x) (( x == 1 ? "a") ? \)
                    ( x == 2 ? "b" ? \)
                    : "?")
- operators:
    - &  : bit and operator
    - |  : bit or operator
    - && : logical and operation
    - || : logical or Operator
    - << : left shift operator 
    - >> : right shift is like division  
    - ^  : xor like or but if two ones then it would be zero

- compiling process:
    - to convert the program to a machine which the computer can understand and execute steps should be implemented
    there are 3 steps:
        1- preprocessing: would be implemented on the lines which has # called directives
        2- compiling: would convert the program to a object code. the program is not yet ready to be used 
        3- linking: the linker would combine the objects to produce an exectuable file which can be used  

- comment in c language:
    - to use comment in c /* --- */ or //

- declaration:
    - to say that a variable of a specific name exist and has a specific type 

- printf/scanf:
    - f means formated, This function is in the header file <stdio.h>
    - printf("string", expr1, expr2, ..);
    - compiler does not check that the expression and the string matches, if the number of the formated and the variable does not match the compiler wont produce an error 
    - formating:
        - %d is used to print a decimal number
        - to define a minimal number of digit which must be printed %.2d would print at least two digits. if the number less than 2 digits, zeros would be added to the left of the number 
        - ex:
            print("%.2d", x);
        - using %5d would define the minimual characters for the formated variable where space is considered to be a character 
        - ex:
            x = 1;
            print("%3.2d",x);
            - would print " 01" which is two digits 01 and three charcters which are space, 0 and 1 
            - %u base 10
            - %x hex
            - %hd short integer
    - sprintf(varOfTypeArrayChar, "format", var1,var2);

- macro:
    - it can be used to define a constant variable
    - ex:
        #define INCHES_PER_POUND 166
    - if the macro has an operation we should use parentheses 
    - ex:
        #define MACRO_OPERATION (1 / 12)

- types in c:
    -  numeric types could be integer or float which define the value but doesnot define how the value would be stored in memory how much memory would the variable consume.
    - to decide the size of the variable another defination is needed which is short, long, long long 
    - numeric types:
        - integer
            - signed 
            - unsigned
        - float
        - the compiler would consider any number by default as a signed number, in order to tell the compiler that the number ist unsigned u can write u at the end of the number
        ex:
            0x00001 -> this number is consider a signed number 
            0x00001u -> this number is now unsigned number 
            
- read / write character:
    - putchar(ch) 
    - ch = getchar()

- to get the size of a variable u can use sizeof
    - ex:
        sizeof(int), sizeof(x)

- array:
    - int x[10];
        - array which have the size 10
    - to get the size of the array u divide the whole size and the size of an element
    ex:
        int size = sizeof(x)/sizeof(x[0]);
        
- scope:
    - local : block scope and temp storage duration
    - static local : block scope and static storage duration 
    - global: static local duration, file scope

- pointer:
    - it is a variable which point to an address
    - pointer should point to a specific data type 
    - & to get the address of a variavble while * is used to dereference a variable
    - the pointer can be used to pass a variable to a function and change the value of that variable by dereferencing the variable 
    - function can return pointer to external variable, static variable but not a local variable    

- string:
    - it is any thing inside ""
    - string is stored as const char* p means u cannot change the value of the string once u created it but u can access element of the string 
    - char *pointer ="ahmed";
        - it is a const char array
        - pointer[0]='A' -> would caúse the program to crash

    - char array[] = "ahmed";
        - it is an array
        array[0] = 'A'; -> it is ok 
    - u cannot copy an string 
    char P[10];
    p = "ahmed"; -> error
    char p[10] = "ahmed"; -> ok
    - strlen():
        - this would get the size of the string till '\n' is found     
    - if u want to add something to a string u can use strcat. for example u want to add a new line at the beging of the string
    - sprintf(DUMMYBUF,"\r\n");
    - strcat(oldstring,DUMMYBUF)


- macro:
    - define end with the first new line 
    - if u want to continue u have to use \
    - function like macro:
        - define max(x,y) ((x)>(y)?(x):(y))
        - u should need write space betweem the name of the macro and the parenthesis 
        - macro parameter maybe evaluate more than once which is different than how the function would behave
            max(i++,z)

    - # : it is used to make the parameter as string
    - ## : it is used to concatenate the two params
    - if u want to use macro which extend on a multiple lines write the macro as do{} while(0), as while expect ; at the end 

- operator:
    - comma operator:
    - c would execute the command before the comma and return the last element
        - int x =1 , y=2 , z=3 ; 
            - it is used as seperator and 
        x = (1,2,3); -> x = 3 
        x= 1,2,3 -> x = 1
        int x = 1,2,3 -> error

- typedef:
    - typedef name alias;
    - typedef char bool_t;

- stdint.h:
    - int8_t, int16_t,unit8 ... are defined in stdint.h 
    - where int8 is alias for char, 16 alias for short 

- structure:
    - it is a way to compund data of different types in a single datatype
    - structure is passed by value means a copy of the structure would be created if u passed the structure to a function
    ex1:
        - struct{ ....} var -> create variable
    ex2:
        - struct type {...}; -> create type
        . struct type var -> use the type to create variable
    ex3:
        typedef type{...}; -> create type
        type var -> create variable
    ex4:
        typedef struct type {..} var ->  create type and variable in one step

- bit operation:
    - set a bit field: x |= (1<<n);
    - reset a bit field: x &= ~(1<<n);
    - test a bit field: (x & (1<<n));
    - another way: (x & (1<<n) >> n == 1;
    - toggle a bit: x ^=(1<<n); would toggle the bit which i am interested in 
    - to set a certain bit field
        - u have first use & to reset the range of bit u want write at. then use | to write the value u want 
        - myvar &= 0xFF0F; // to make sure that the bits which i would write is already zeros. because i might want to write 101 and the original data is 010 so if i used only or the one in the middle would remain also one 
        - myvar |= 1<<4;

- volatile:
    - means the data can be changed at anytime.
    - it would prevent the optimasation reduce the reading action on the variavble
    - int volatile* regAddress = 0xafcdf; 

- how to access register in SOC:
    - #define myregister = *((volatile unsigned int*)(0x306100)) // cast the address and use it as pointer so u dont have to dereference the register as the myregister is already dereferenced 

- to declare array of pointer to function:
    - void (*arr[3])(void *): array of size 3 to function. The function take void* arrags and return void

- if u want to define general pointer to function which take general data
    - typedef struct s_name { void *data; void (*function)(*data)} s_name;
    - s_name task1 , task2;
    - task1.data = &var
    - task1.func = nameofFunction
    - task1.func((void*)task1.data);

- if u want to write a value 
    - int x = 123u -> to say this value is unsigned because by default the values are signed values
    - 0b1110 -> to say u are writing a binary value
    - 0x12 -> to say are writing a binary
    
##############
#### tools ###
##############

- IDE:
    - integerated developement

- toolchain:
    - compiler + linker + c.libs + binutils 
    - native : code would run on the same device which has compiled the SW 
    - cross toolchain : the program would run on different device than has compiled the SW

- keil micro vision:
    - it is the idl for arm which has simulation 
    - it has a package installer which has files which are needed to program aboard which has arm processor
    - u can download starter, CMSIS software which is something like RTOS 
    - u can use it to debug the SW
    - new project in keil, project->options->output-> rename the file to --.axf which is the file we compiled from the eclipse and the name of the executable and put the file with .c extensio

- minGW:
    - it is the native toolchain which would produce code which would run on the PC
    
- timer in c:
    - define array which has address of variable as element
    - every time the systick happens iteration throw array happen, and one would be addedd if the address of the element is a valid address

####################
#### embedded HW ###
####################

- embedded hardware consist of 5 elements
    - CPU, Input, Output, memory, bus

- embedded HW:

- IC:
    - integrated circuit
    - it has one task like timer  

- microprocessor:
    - it is an IC which perform logic operation, arithmatic ALU, CU register, Cache

- instruction lifr cycle:
    - fetch, decode, execute

- micro processor:
    - it is micro controller + memory + I/O

- kit:
    - micro controller on a board

- ECU:
    - it is kit + sensors + actuator

- register:
    - it is a collection of flip flop

- clock:
    - it is used to control the speed of the SOC
    - higher clocker means higher power consumpotion
    - it needs a clock source which might be inside or outside source
    - the clock might is used to control the operating system, and the CPU

- RCC:
    - reset and clock

- interrupt:
    - ir: interrupt request 
    - isr: interrupt service routine
    - gic : general interrupt controller
    - external interrpt module is a HW module to controll the external interrupt, to detect if the interrupt at the rising edge or failing edge
    - interrupt is a hardware calling a function

- interrupt latency:
    - the time between the interrupt has been raised till the the interrupt has been serviced

- nested interrupt ex: NVIC:
    - an interrupt can interrupt another interrupt. 
    - preemtiy interrupt

- pin:
    - the pin might be GPIO, alternative function, or externak interrupt

- GPIO:
    - input output module
    - alternative module is something like MUX to connect the I/O to ADC, UART, SPI, External interrupt

- GPIO output:
    - push pull:
        - it uses 2 transistors
        - pull would sink current from the out world
        - push would insert current to the output world 
        - it is best suitable with simplex connection like UART, SPI
        - bit logic is faster than the open drain 

    - open drain:
        - current can be only absorded 
        - only one transistor is used 
        - in case of open drain the pin is floating means it is an open circuit 
        - if u connected pull up resistent then when the pin is floating the output would be active, when the pin is in drain the current would be consumed in the pin and the output would be inactive 
        - an example of the open drain is I2C bus. when all the devices are idle then the deivces would be open drain which make the voltage of the bus is high. when an device is acive it would be drain which make the bus low
        - if u  made pushpull connection then a short circuit would happen as one is push and the other is pull making short circuit connection.

- GPIO input:
     - pull up:
        - inside the micro controller the pin has voltage throw impedenace and the pin see 1 
        - when u connect short circuit to the micro controller then the pin is low 

    - pull down:
        - inside the micro controller the pin has always 0 throw impedance

    - floating:
        - inside the micro controller the pin is not connected to any thing and it has impendanance

- slew rate:
    - how fast u can change the voltage from 0 to 1
    - the higher the slew rate the better the GPIO
    - the higher slew rate would cause noise on the system 

- remap:
    - change the alternative function of the pin 

- CMISIS:
    - it is a library for arm

- power managment unit:
    - it is used to control the clock to reduce the power consumption

-different HW architecture:
    - Von Neumann: store the data and the instruction in the same place, and use the same bus to get the data and the instrucion which make the architecture slower comparing to the Hardvard architecture
    - Hardvard: the data and the instrcution are stored in different area, and use different buses for data, and another bus for instruction 
    - most DSP use Hardvard 

- instruction set:
    - it is the command which the processor can understand there are two main types of the instruction set CISC and RISC 
    - CISC: 
        - complex
        - it support more instrcutions such as multipluation
        - the instruction might be executed in more than one cycle 
    -RISC:
        - reduced
        - it has less instructions to support
        - the instruction needs one cycle to be executed 

- instruction consist of operation(op-code) and operand which is the data the operation would be executed on
    if the instruction 32 bits size. some part of the instruction would be devoted to the op-code while the other part would be devoted to the operand which are the registers which have the data to work on. an example for instruction would be something like load, store, move  

- memory:
    - u can divide the volatile into ROM, PROM, EPROM, EEPROM, Flash
    - non volatile:
        - SRAM: static doesnot need to be refreshed, fast, expensiver
        - DRAM: based on capacitor, needed to be recharged, slower, cheaper
    - the data can be stord as big endian or small endian.
        - big endian: we store the MSB at first 0x11223344 would be stored address0 = 11, address3=44
        - little endian: we store the less significant byte first 0x11223344 byte0=44, byte3=11
    - word size is the size of an integer 

- I/O:
    - momory mapped io: the io has the same address space as the main memory
    - port map io : there is instruction which is made only for the io 

- operating system tasks:  
    - in general the opreating system is resource allocator. the resources are CPU, memory, I/Os
    following would be a list of the resources which the OS would provide 
    1- process managment:
        - OS control which process would run and for long should the process be active
    2- memory managment:
        - which address is avaliable to the process 

- bus:
    - the buses are divided in three types: data, address, control
    - data : is the information which we write or read
    - address: where we write the data or where we read the data from
    - control : decide of we read the data or write the data 
    - width : represent the size of the data which can move at the same time. Width can be 8 bits, 16 bits, 32 bits

- bus bridge:
    - some devices would be set on the another bus
    - which is connected to the master bus
    - the other bus doesnot need to be fast 
    - this way we can reduce the cost as the other bus is cheaper

- micro controller: 
    - it is a micro processor + perpherial (timer, memory, UART, dma)

- DSP:
    - mirco processor which can perform multiple in one instruction 
 
- in C:
    kb = 1024 = 2^10 
    2kb = 2028 = 2^11
    4kb = 4056 = 2^12

- when u work with integer and the float at the same time the result would map to the float,  and when we store the result to an variavle the data would map to the variable 

- the different between broadcast and multicast, point to point.
    - broadcast : to all the device which is connected to the system
    - multicast : to subset of the device which is connected to the system
    - point to point : the data is sent from a deive to anther device 

- communication is defined using 4 elements:
    - what : means what is being transmitted
    - with whom: who send the data and who receive the data 
    - how : the protocal which is used to transfer the data 
    - transportation layer : the medium in which the data is transported 

- different ways of interconnection in system:
    - star, ring, parellel
    - star:
        - it is a master slave communication where all the data exchange is controlled by the master 
        - if the data want to get the status of a device in the system, the master would issue an read command to the device 
        - the failure of one device wont prevent the system from working 
    - ring:
        - there is no master/ slave conncept 
        - any device can send data to the bus.
        - all device would receive the data
        - the device which is interested in the data would accept it
        - the bus here is the neck point as only one device can control the bus

    - parellel:
        - all devices can receive data
        - only the master can send data

- communication:
    - syhnchronise: the data is sending with a clock, where the device which send the data would send at the rising edge of the clock while the device which receive the data would get the data at the failing edge of the clock 
    - asynchronise:
        - there is no clock between sender and the receivcer device 
        - the frame would define when the device is sending data 
        - and there is a baud rate to define the speed at which the device should sample the data 

    - throughput:
        - the amount bits which is send in a second 

    - UART:
        - it is asynchronise communication 
        - the is no clock is required as it is a synchrnoise communication
        - no return to zero:
            - 1 would take a whole cycle 
            - 0 would take a whole cycle 
        - return to zero:
            - 1 would take a half cycle 
            - 0 would take a whole cycle 
        
        - over samplying:
            - more bits would be captured within the cycle and then a voting system is used to decide weather this bit is zero or one

        - flow control:
            - two wires are added to the UART request to send(O/P), clear to send(I/P)

#########################
#### Operating system ###
#########################

- when the operating system has a time constrain. it is called RTOS meaning real time operating system 
- process is a software which is executinh 
- the part of the software which decide which process would be active is called scheduler and it has scheduler stragety 
- every task in the system is represented by task control block (TCB). it has alot of information about the process such as process ID, CPU register, program counter, scheduling information. TCB is struct 

- process status:
    - the process which is active is called being in the run state 
    - the process which is ready to be run but not running is called in ready state

- interrupt:
    - u can control the interrupt using Masking. which give the ability to the mirco processor to ignore the interrupt when it happens 
    - some interrupt are not maskable which is related to system level functionality
    - priotity interrupt where the higher priority can interrupt the low priority 

- time:
    - inteveral: it is marked by specific start and end time
    - duration : it is the different between the start and the stop time
    
- IDE:
    - integerated developement
    - there is atm32cube ide is the ide from stm based on eclipse to program stm board

- stm32cube:
    - u need workspace to store the project u are working on
    - workspace where you store your projects
    - to create new project new -> new project -> and then select the board or the micro controller

- SWD:
    - serial wire Debug
    - consist of Data, clock, trace, and SWO 
    - it is alternative to JTAG
    - there is ITM which is buffer connect to the SWO 

- toolchain:
    - compiler + linker + c.libs + binutils 
    - native : code would run on the same device which has compiled the SW 
    - cross toolchain : the program would run on different device than has compiled the SW

- minGW:
    - it is the native toolchain which would produce code which would run on the PC

######################
### Data structure ###
######################

- Data structure:
    - FIFO : first in first output -> buffer
    - LIFO : last input first output -> stack

- ADT:
    - abstrack data type
    - it is an interface which enable the user to use the data 

- state machine:
    - ttool : it is a tool which u might use to draw state machine 

- best practise for drivers:
    - MCAL:
        - it is where the micro controller code is defined such as UART, GPIO

    - HAL:
        - hardware abstraction layer 
        - it is where the ECU data is defined such as LCM, motor